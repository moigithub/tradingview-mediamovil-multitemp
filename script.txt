//@version=5
indicator('MAs Multi Temp. Volume check', shorttitle='MA\'s MultiTemp', overlay=true)

showEMA20 = input(title='mostrar EMA 20', defval=true)
showMA50 = input(title='mostrar MA 50', defval=true)
showMA100 = input(title='mostrar MA 100', defval=false)
showMA200 = input(title='mostrar MA 200', defval=true)

showMonthly = input(title='indicador mensual', defval=true)
showWeekly = input(title='indicador semanal', defval=true)
showDayly = input(title='indicador diario', defval=true)
show4Hour = input(title='indicador 4 horas', defval=true)
show1Hour = input(title='indicador 1 hora', defval=true)
show30Min = input(title='indicador 30 minutos', defval=false)

showVWAP = input(title='VWAP', defval=true)
barcolor = input.bool(title='color bar', defval = true, tooltip = 'bar color based on buy/sell volume, instead of open/close')

// Take input for which daily SMAs to use
inputEMA20 = input.int(title='EMA 20', minval=1, step=1, defval=20)
inputMA50 = input.int(title='EMA 50', minval=1, step=1, defval=50)
inputMA100 = input.int(title='EMA 100', minval=1, step=1, defval=100)
inputMA200 = input.int(title='EMA 200', minval=1, step=1, defval=200)


// volume color bars

length = input.int(title='volume length', tooltip='how many candles will use to calculate volume strength', minval=1, step=1, defval=30)
avrg = ta.sma(volume, length)

// rojos
volrojoalto = volume > avrg * 1.5 and close < open
volrojomedio = volume >= avrg * 0.5 and volume <= avrg * 1.5 and close < open
volrojobajo = volume < avrg * 0.5 and close < open

//verdes
volverdealto = volume > avrg * 1.5 and close > open
volverdemedio = volume >= avrg * 0.5 and volume <= avrg * 1.5 and close > open
volverdebajo = volume < avrg * 0.5 and close > open


colrojooscuro = color.maroon
colrojo = color.red
colrojoclaro = color.orange


colverdeoscuro = color.rgb(0, 50, 0, 1)
colverde = color.rgb(0, 150, 0, 1)
colverdeclaro = color.rgb(0, 250, 0, 1)


color = volrojoalto ? colrojooscuro : volrojomedio ? colrojo : volrojobajo ? colrojoclaro : volverdealto ? colverdeoscuro : volverdemedio ? colverde : volverdebajo ? colverdeclaro : na

// colorear barras si el volumen de compra es mayor que el de ventas de verde(ish).. (a pesar q la vela es roja/venta)
// o de rojo(ish) si el volumen de venta es mayor al de compras (a pesar q la vela es verde/compra)
// esto sucede con las velas martillo...(MECHA grande, cuerpo pequeÃ±o)
buyVolume  =  (high==low)? 0: volume*(close-low)/(high-low)  
sellVolume =  (high==low)? 0: volume*(high-close)/(high-low) 

if(barcolor)
    if(buyVolume>sellVolume)
        color := volverdealto ? colverdeoscuro : volverdemedio ? colverde : volverdebajo ? colverdeclaro : color.green

    if(sellVolume>buyVolume)
        color := volrojoalto ? colrojooscuro : volrojomedio ? colrojo : volrojobajo ? colrojoclaro : color.red

barcolor(color)

/// fin volume color bars

// Evaluate EMAs 20
EMA20 = ta.ema(close, inputEMA20)

// eval sma 50, 100, 200
MA50 = ta.sma(close, inputMA50)
MA100 = ta.sma(close, inputMA100)
MA200 = ta.sma(close, inputMA200)


// Grab the otras temporalidades EMAs for the ticker
plotEMA20M = request.security(syminfo.tickerid, 'M', EMA20)
plotEMA20W = request.security(syminfo.tickerid, 'W', EMA20)
plotEMA20D = request.security(syminfo.tickerid, 'D', EMA20)
plotEMA20H4 = request.security(syminfo.tickerid, '240', EMA20)  // 240 minutos = 4 horas
plotEMA20H1 = request.security(syminfo.tickerid, '60', EMA20)  // 60 minutos
plotEMA20M30 = request.security(syminfo.tickerid, '30', EMA20)

plotMA50M = request.security(syminfo.tickerid, 'M', MA50)
plotMA50W = request.security(syminfo.tickerid, 'W', MA50)
plotMA50D = request.security(syminfo.tickerid, 'D', MA50)
plotMA50H4 = request.security(syminfo.tickerid, '240', MA50)
plotMA50H1 = request.security(syminfo.tickerid, '60', MA50)
plotMA50M30 = request.security(syminfo.tickerid, '30', MA50)

plotMA100M = request.security(syminfo.tickerid, 'M', MA100)
plotMA100W = request.security(syminfo.tickerid, 'W', MA100)
plotMA100D = request.security(syminfo.tickerid, 'D', MA100)
plotMA100H4 = request.security(syminfo.tickerid, '240', MA100)
plotMA100H1 = request.security(syminfo.tickerid, '60', MA100)
plotMA100M30 = request.security(syminfo.tickerid, '30', MA100)


plotMA200M = request.security(syminfo.tickerid, 'M', MA200)
plotMA200W = request.security(syminfo.tickerid, 'W', MA200)
plotMA200D = request.security(syminfo.tickerid, 'D', MA200)
plotMA200H4 = request.security(syminfo.tickerid, '240', MA200)
plotMA200H1 = request.security(syminfo.tickerid, '60', MA200)
plotMA200M30 = request.security(syminfo.tickerid, '30', MA200)


vwapValue = ta.vwap(close)





var offsetW = 10
var offsetD = 8
var offset4H = 6
var offset1H = 4
var offset30m = 2

// we use minimal time of bars as an offset in future 
var float minBarTime = 999999999999
currentTime = time(timeframe.period)
timeOfCurrentBar = ta.change(currentTime, 1)
minBarTime := not na(minBarTime) ? math.min(timeOfCurrentBar, minBarTime) : timeOfCurrentBar


if showMonthly and barstate.islast
    if showEMA20
        var label l20m = label.new(bar_index, plotEMA20M, '--- M', xloc=xloc.bar_time, yloc=yloc.price, color=color.green, style=label.style_none, textcolor=color.white, size=size.small)
        label.set_x(l20m, int(currentTime + offsetW * minBarTime))
        label.set_y(l20m, plotEMA20M)

    if showMA50
        var label l50w = label.new(bar_index, plotMA50W, '--- M', xloc=xloc.bar_time, yloc=yloc.price, color=color.yellow, style=label.style_none, textcolor=color.yellow, size=size.small)
        label.set_x(l50w, int(currentTime + offsetW * minBarTime))
        label.set_y(l50w, plotMA50M)

    if showMA100
        var label l100w = label.new(bar_index, plotMA100W, '--- M', xloc=xloc.bar_time, yloc=yloc.price, color=color.maroon, style=label.style_none, textcolor=color.maroon, size=size.small)
        label.set_x(l100w, int(currentTime + offsetW * minBarTime))
        label.set_y(l100w, plotMA100M)

    if showMA200
        var label l200w = label.new(bar_index, plotMA200W, '--- M', xloc=xloc.bar_time, yloc=yloc.price, color=color.red, style=label.style_text_outline, textcolor=color.black, size=size.small)
        label.set_x(l200w, int(currentTime + offsetW * minBarTime))
        label.set_y(l200w, plotMA200M)

if showWeekly and barstate.islast
    if showEMA20
        var label l20w = label.new(bar_index, plotEMA20W, '--- W', xloc=xloc.bar_time, yloc=yloc.price, color=color.white, style=label.style_none, textcolor=color.white, size=size.small)
        label.set_x(l20w, int(currentTime + offsetW * minBarTime))
        label.set_y(l20w, plotEMA20W)

    if showMA50
        var label l50w = label.new(bar_index, plotMA50W, '--- W', xloc=xloc.bar_time, yloc=yloc.price, color=color.yellow, style=label.style_none, textcolor=color.yellow, size=size.small)
        label.set_x(l50w, int(currentTime + offsetW * minBarTime))
        label.set_y(l50w, plotMA50W)

    if showMA100
        var label l100w = label.new(bar_index, plotMA100W, '--- W', xloc=xloc.bar_time, yloc=yloc.price, color=color.maroon, style=label.style_none, textcolor=color.maroon, size=size.small)
        label.set_x(l100w, int(currentTime + offsetW * minBarTime))
        label.set_y(l100w, plotMA100W)

    if showMA200
        var label l200w = label.new(bar_index, plotMA200W, '--- W', xloc=xloc.bar_time, yloc=yloc.price, color=color.red, style=label.style_text_outline, textcolor=color.black, size=size.small)
        label.set_x(l200w, int(currentTime + offsetW * minBarTime))
        label.set_y(l200w, plotMA200W)

if showDayly and barstate.islast
    if showEMA20
        var label l = label.new(bar_index, plotEMA20D, '--- D', xloc=xloc.bar_time, yloc=yloc.price, color=color.white, style=label.style_none, textcolor=color.white, size=size.small)
        label.set_x(l, int(currentTime + offsetD * minBarTime))
        label.set_y(l, plotEMA20D)

    if showMA50
        var label l50d = label.new(bar_index, plotMA50D, '--- D', xloc=xloc.bar_time, yloc=yloc.price, color=color.yellow, style=label.style_none, textcolor=color.yellow, size=size.small)
        label.set_x(l50d, int(currentTime + offsetD * minBarTime))
        label.set_y(l50d, plotMA50D)

    if showMA100
        var label l100d = label.new(bar_index, plotMA100D, '--- D', xloc=xloc.bar_time, yloc=yloc.price, color=color.maroon, style=label.style_none, textcolor=color.maroon, size=size.small)
        label.set_x(l100d, int(currentTime + offsetD * minBarTime))
        label.set_y(l100d, plotMA100D)

    if showMA200
        var label l200w = label.new(bar_index, plotMA200D, '--- D', xloc=xloc.bar_time, yloc=yloc.price, color=color.red, style=label.style_text_outline, textcolor=color.black, size=size.small)
        label.set_x(l200w, int(currentTime + offsetD * minBarTime))
        label.set_y(l200w, plotMA200D)

if show4Hour and barstate.islast
    if showEMA20
        var label l = label.new(bar_index, plotEMA20H4, '--- 4h', xloc=xloc.bar_time, yloc=yloc.price, color=color.white, style=label.style_none, textcolor=color.white, size=size.small)
        label.set_x(l, int(currentTime + offset4H * minBarTime))
        label.set_y(l, plotEMA20H4)

    if showMA50
        var label l50d = label.new(bar_index, plotMA50H4, '--- 4h', xloc=xloc.bar_time, yloc=yloc.price, color=color.yellow, style=label.style_none, textcolor=color.yellow, size=size.small)
        label.set_x(l50d, int(currentTime + offset4H * minBarTime))
        label.set_y(l50d, plotMA50H4)

    if showMA100
        var label l100d = label.new(bar_index, plotMA100H4, '--- 4h', xloc=xloc.bar_time, yloc=yloc.price, color=color.maroon, style=label.style_none, textcolor=color.maroon, size=size.small)
        label.set_x(l100d, int(currentTime + offset4H * minBarTime))
        label.set_y(l100d, plotMA100H4)

    if showMA200
        var label l200w = label.new(bar_index, plotMA200H4, '--- 4h', xloc=xloc.bar_time, yloc=yloc.price, color=color.red, style=label.style_text_outline, textcolor=color.black, size=size.small)
        label.set_x(l200w, int(currentTime + offset4H * minBarTime))
        label.set_y(l200w, plotMA200H4)

if show1Hour and barstate.islast
    if showEMA20
        var label l = label.new(bar_index, plotEMA20H1, '--- 1h', xloc=xloc.bar_time, yloc=yloc.price, color=color.white, style=label.style_none, textcolor=color.white, size=size.small)
        label.set_x(l, int(currentTime + offset1H * minBarTime))
        label.set_y(l, plotEMA20H1)

    if showMA50
        var label l50d = label.new(bar_index, plotMA50H1, '--- 1h', xloc=xloc.bar_time, yloc=yloc.price, color=color.yellow, style=label.style_none, textcolor=color.yellow, size=size.small)
        label.set_x(l50d, int(currentTime + offset1H * minBarTime))
        label.set_y(l50d, plotMA50H1)

    if showMA100
        var label l100d = label.new(bar_index, plotMA100H1, '--- 1h', xloc=xloc.bar_time, yloc=yloc.price, color=color.maroon, style=label.style_none, textcolor=color.maroon, size=size.small)
        label.set_x(l100d, int(currentTime + offset1H * minBarTime))
        label.set_y(l100d, plotMA100H1)

    if showMA200
        var label l200w = label.new(bar_index, plotMA200H1, '--- 1h', xloc=xloc.bar_time, yloc=yloc.price, color=color.red, style=label.style_text_outline, textcolor=color.black, size=size.small)
        label.set_x(l200w, int(currentTime + offset1H * minBarTime))
        label.set_y(l200w, plotMA200H1)

if show30Min and barstate.islast
    if showEMA20
        var label l = label.new(bar_index, plotEMA20M30, '--- 30m', xloc=xloc.bar_time, yloc=yloc.price, color=color.white, style=label.style_none, textcolor=color.white, size=size.small)
        label.set_x(l, int(currentTime + offset30m * minBarTime))
        label.set_y(l, plotEMA20M30)

    if showMA50
        var label l50d = label.new(bar_index, plotMA50M30, '--- 30m', xloc=xloc.bar_time, yloc=yloc.price, color=color.yellow, style=label.style_none, textcolor=color.yellow, size=size.small)
        label.set_x(l50d, int(currentTime + offset30m * minBarTime))
        label.set_y(l50d, plotMA50M30)

    if showMA100
        var label l100d = label.new(bar_index, plotMA100M30, '--- 30m', xloc=xloc.bar_time, yloc=yloc.price, color=color.maroon, style=label.style_none, textcolor=color.maroon, size=size.small)
        label.set_x(l100d, int(currentTime + offset30m * minBarTime))
        label.set_y(l100d, plotMA100M30)

    if showMA200
        var label l200w = label.new(bar_index, plotMA200M30, '--- 30m', xloc=xloc.bar_time, yloc=yloc.price, color=color.red, style=label.style_text_outline, textcolor=color.black, size=size.small)
        label.set_x(l200w, int(currentTime + offset30m * minBarTime))
        label.set_y(l200w, plotMA200M30)

// Plot (e)MA current temporality
plot(showVWAP ? vwapValue : na, color=color.new(color.teal, 0), linewidth=2)
plot(EMA20, color=color.new(color.white, 0), linewidth=1)
plot(MA50, color=color.new(color.yellow, 0), linewidth=1)
plot(MA100, color=color.new(color.maroon, 0), linewidth=1)
plot(MA200, color=color.new(color.red, 0), linewidth=1)

// Plot the SMAs/EMAs
plot(showEMA20 and showMonthly ? plotEMA20M : na, linewidth=2, color=bar_index % 3 == 0 ?color.new(color.blue, 15) : color.white, style=plot.style_stepline_diamond)
plot(showEMA20 and showWeekly ? plotEMA20W : na, linewidth=2, color=color.new(color.white, 15), style=plot.style_cross)
plot(showEMA20 and showDayly ? plotEMA20D : na, linewidth=3, color=bar_index % 3 == 0 ? color.gray : color.white)
plot(showEMA20 and show4Hour ? plotEMA20H4 : na, linewidth=2, color=bar_index % 2 == 0 ? color.white : color.black)
plot(showEMA20 and show1Hour ? plotEMA20H1 : na, linewidth=1, color=color.new(color.white, 15))
plot(showEMA20 and show30Min ? plotEMA20M30 : na, linewidth=1, color=color.new(color.white, 15), style=plot.style_circles)

plot(showMA50 and showMonthly ? plotMA50M : na, linewidth=2, color=bar_index % 3 == 0 ?color.new(color.blue, 15) : color.yellow, style=plot.style_stepline_diamond)
plot(showMA50 and showWeekly ? plotMA50W : na, linewidth=2, color=color.new(color.yellow, 15), style=plot.style_cross)
plot(showMA50 and showDayly ? plotMA50D : na, linewidth=3, color=bar_index % 3 == 0 ? color.gray : color.yellow)
plot(showMA50 and show4Hour ? plotMA50H4 : na, linewidth=2, color=bar_index % 2 == 0 ? color.yellow : color.black)
plot(showMA50 and show1Hour ? plotMA50H1 : na, linewidth=1, color=color.new(color.yellow, 15))
plot(showMA50 and show30Min ? plotMA50M30 : na, linewidth=1, color=color.new(color.yellow, 15), style=plot.style_circles)

plot(showMA100 and showMonthly ? plotMA100M : na, linewidth=2, color=bar_index % 3 == 0 ?color.new(color.blue, 15) : color.maroon, style=plot.style_stepline_diamond)
plot(showMA100 and showWeekly ? plotMA100W : na, linewidth=2, color=color.new(color.maroon, 15), style=plot.style_cross)
plot(showMA100 and showDayly ? plotMA100D : na, linewidth=3, color=bar_index % 3 == 0 ? color.gray : color.maroon)
plot(showMA100 and show4Hour ? plotMA100H4 : na, linewidth=2, color=bar_index % 2 == 0 ? color.maroon : color.black)
plot(showMA100 and show1Hour ? plotMA100H1 : na, linewidth=1, color=color.new(color.maroon, 15))
plot(showMA100 and show30Min ? plotMA100M30 : na, linewidth=1, color=color.new(color.maroon, 15), style=plot.style_circles)

plot(showMA200 and showMonthly ? plotMA200M : na, linewidth=2, color=bar_index % 3 == 0 ?color.new(color.blue, 15) : color.red, style=plot.style_stepline_diamond)
plot(showMA200 and showWeekly ? plotMA200W : na, linewidth=2, color=color.new(#fa3c3c, 15), style=plot.style_cross)
plot(showMA200 and showDayly ? plotMA200D : na, linewidth=3, color=bar_index % 3 == 0 ? color.gray : color.red)
plot(showMA200 and show4Hour ? plotMA200H4 : na, linewidth=2, color=bar_index % 2 == 0 ? color.red : color.black)
plot(showMA200 and show1Hour ? plotMA200H1 : na, linewidth=1, color=color.new(color.red, 15))
plot(showMA200 and show30Min ? plotMA200M30 : na, linewidth=1, color=color.new(color.red, 15), style=plot.style_circles)


/////////////////
//verde = close > open
//plotshape(verde, title="verde", location=location.abovebar, color=color.green, style=shape.xcross)


// tolerance = input.float(title='Doji size tolerance', defval=0.1, minval=0)
// esDoji = math.abs(close - open) / (high - low) < tolerance

//**************************************
inputVolumeFactor = input.float(title='Volume factor', minval=1.5, step=0.1, defval=2.5, tooltip = 'new candle vol VS prev.candles vol average')
inputStopCandle = input.bool(title='Show stop candle?', tooltip='previous candle have volume, next candle reverse showing it loosing power', defval=true)
// VERDE SUPEra roja
isLastCandleGreen = close[0] > open[0]  // verde ultimo vela (index 0 => ultima vela)
isPreviousCandleRed = close[1] < open[1]  // rojo  (index 1 => vela anterior)
// candleR2 = close[2] < open[2] // rojo
// lastCandleSize = abs(high[0] - low[0])
// prevCandleSize = abs(high[1] - low[1])
//verdeSuperaRoja = isLastCandleGreen and isPreviousCandleRed and candleR2 and lastVCandleSize > prevRCandleSize and lastVCandleBodySize > prevRCandleBodySize and not esDoji

// check con la ema 20 actual
//EMA20debajoRoja = EMA20[0] < close[0]
//distanciaREMA20 = abs(close[0]-EMA20[0])>lastRCandleSize and EMA20debajoRoja
//plotshape(rojaSuperaVerde and distanciaREMA20, title="RSV", location=location.abovebar, color=color.white, style=shape.triangledown, size=size.tiny, transp=20)

// idea indicador.. de rojo con mucho volumen --> A --> verde
volAverage = ta.sma(volume, length)
// volrojoalto rojo oscuro con mucho volumen
prevCandleRojoHighVolume = volume[1] > volAverage * inputVolumeFactor and isPreviousCandleRed
plotshape(inputStopCandle and prevCandleRojoHighVolume and isLastCandleGreen, title='RojoSuperaVerde', location=location.belowbar, color=color.new(color.blue, 60), style=shape.triangleup,textcolor=color.yellow, size=size.normal, text='stop!')


//**************************************
// ROJO SUPEra verde
isLastCandleRed = close[0] < open[0]  // rojo ultimo vela
isPreviousCandleGreen = close[1] > open[1]  // verde
// candleV2 = close[2] > open[2] // verde

// idea indicador... de verde con mucho volumen --> A --> rojo
// volverdealto verde oscuro con mucho volumen
prevCandleVerdeHighVolume = volume[1] > volAverage * inputVolumeFactor and isPreviousCandleGreen
plotshape(inputStopCandle and prevCandleVerdeHighVolume and isLastCandleRed, title='VerdeSuperaRojo', location=location.abovebar, color=color.new(color.blue, 60), style=shape.triangledown,textcolor=color.yellow, size=size.normal, text='stop!')



// muestra volumen entrando, una candle fuerte, cambiando de color
inputPushCandle = input.bool(title='Show power candle?', tooltip='shows attemp to reverse (Red<->Green) and high volume entering', defval=true)

haveLastCandleHighVolume = volume > volAverage * inputVolumeFactor
// de rojo a verde con juerza



// la ultima vela es mas grande que la anterior
inputShowLastCandleBigger = input.bool(title='Show last candle bigger?', tooltip='last candle is bigger than previous', defval=true)

lastCandleBodySize = math.abs(open[0] - close[0])
prevCandleBodySize = math.abs(open[1] - close[1])
lastCandleIsBigger = lastCandleBodySize > prevCandleBodySize



if (inputPushCandle and isPreviousCandleRed and isLastCandleGreen and haveLastCandleHighVolume)
    // de rojo a verde con juerza
    if (inputShowLastCandleBigger and lastCandleIsBigger)
        // rojo supera verde
        myLabel = label.new(x=bar_index, y=na, yloc=yloc.belowbar, text="push R->V", color=color.new(color.blue, 50), textcolor=color.yellow, style=label.style_triangleup,  size=size.small)
    else
        myLabel = label.new(x=bar_index, y=na, yloc=yloc.belowbar, text="push", color=color.new(color.blue, 50), textcolor=color.yellow, style=label.style_triangleup,  size=size.small)


if (inputPushCandle and isPreviousCandleGreen and isLastCandleRed and haveLastCandleHighVolume)
    // de verde a rojo con juerza
    if (inputShowLastCandleBigger and lastCandleIsBigger)
        // verde supera rojo
        lbl = label.new(x=bar_index, y=na, yloc=yloc.abovebar, text="push V->R", color=color.new(color.blue, 50), textcolor=color.yellow, style=label.style_triangledown,  size=size.small)
    else
    // if (not inputShowLastCandleBigger)
        lbl = label.new(x=bar_index, y=na, yloc=yloc.abovebar, text="push", color=color.new(color.blue, 50), textcolor=color.yellow, style=label.style_triangledown,  size=size.small)

 // rsi background oversold, overbought
inputShowOverSoldBoughtOverlay = input.bool(title='Show oversold/overbought overlay?', tooltip='overlay oversold/overbought', defval=true)
len = input.int(title='rsi len', minval=1, step=1, defval=14)
overbought = input.int(title="OB", defval=70)
oversold = input.int(title="OS", defval=30)
 
barsToPaint = 1
bgcolor(inputShowOverSoldBoughtOverlay and ta.barssince(ta.rsi(close, len) >= overbought) < barsToPaint ? color.new(#28813e, 42) : na)
bgcolor(inputShowOverSoldBoughtOverlay and ta.barssince(ta.rsi(close, len) <= oversold) < barsToPaint ? color.new(#EA4444, 41) : na) 


//----------------
// bolinger bands
//----------------
inputShowBolinger = input.bool(title='Show bolinger', tooltip='show bolinger bars', defval=true)
bolingerlength = input.int(title='bolinger length', minval=1, step=1, defval=20)
src = input.source(close, title="Source")
mult = input.float(defval=2.0, minval=0.001, maxval=10, step=0.2)
mult2 = input.float(defval=1.0, minval=0.001, maxval=10, step=0.2)

basis = ta.ema(src, bolingerlength)
dev = mult * ta.stdev(src, bolingerlength)
dev2 = mult2 * ta.stdev(src, bolingerlength)
upper = basis + dev
lower = basis - dev
plot(basis, color=color.red) //sma
p1a = plot(inputShowBolinger ? upper : na, color= color.orange)
p1b = plot(inputShowBolinger ? lower : na, color= color.orange)
fill(p1a, p1b, color= color.rgb(85, 116, 228, 88))

basis2 = ta.vwma(src, bolingerlength)
upper2 = basis2 + dev2
lower2 = basis2 - dev2
plot(basis2, color=color.red) //vol weight ma
p2a = plot(inputShowBolinger ? upper2 : na, color= color.teal)
p2b = plot(inputShowBolinger ? lower2 : na, color= color.teal)
fill(p2a, p2b, color= color.rgb( 11, 85, 28, 88))

// bool longSignal = ta.rising(close, 2) and ta.rising(high, 2) and ta.rising(volume, 2) and ta.crossover(close, lower2)
candleSize = high-low
candleSliceAbove = high - upper
candleSliceBelow = lower-low
percentAbove = candleSliceAbove * 100/candleSize
percentBelow = candleSliceBelow * 100/candleSize
 
percentAmount = input.int(title='candle percent',tooltip='slice of candle percent belor or above bolinger band limit\n pink, green arrow, OB,OS crossover/crossunder\n purple=% candle outside+rsi', minval=1, step=1, defval=10)  //10% above or below bolinger band limit 

// (bajo y volvio a subir) cerro dentro del BB  -- la mecha fuera es mayor que X%
plotchar(ta.crossover(close, lower2) and percentBelow > percentAmount, "long", "ð ", location.belowbar, color=color.new(color.white,20), size = size.small)
plotchar(ta.crossover(close, lower) and percentBelow > percentAmount, "long", "ð ", location.belowbar, color=color.new(color.white,20), size = size.small)

// (subio y volvio a bajar) cerro dentro del BB  -- la mecha fuera es mayor que X%
plotchar(ta.crossunder(close, upper2) and percentAbove > percentAmount, "sell", "ð ", location.abovebar, color=color.new(color.white,20), size = size.small)
plotchar(ta.crossunder(close, upper) and percentAbove > percentAmount, "sell", "ð ", location.abovebar, color=color.new(color.white,20), size = size.small)

//  rsi en sobreventa  --- salio fuera del bolinger band --- cerro dentro del BB -- la mecha fuera es mayor que X%
plotchar(ta.rsi(close, len) < oversold and low<lower and close>lower and percentBelow > percentAmount, "long", "%", location.belowbar, color=color.rgb(255, 235, 255, 6),size = size.tiny)
//  rsi en sobrecompra  --- salio fuera del BB -- cerro dentro del BB  -- la mecha fuera es mayor que X%
plotchar(ta.rsi(close, len) >= overbought and high>upper  and close<upper and percentAbove > percentAmount, "sell", "%", location.abovebar, color=color.new(color.white, 5), size = size.tiny)
